#!/bin/bash
# vim: set foldmethod=marker :
# {{{ Icons

ICON_CLONE="‚û°Ô∏è"
ICON_SUCCESS="‚úÖ"
ICON_WARNING="‚ö†Ô∏è"
ICON_PULL="‚¨ÜÔ∏è"
ICON_STASH="üì¶"
ICON_CLEAN="üßπ"
ICON_CONVERT="üîÑ"
ICON_DONE="‚úÖ"
ICON_TIME="‚è±Ô∏è"

# -------------------------------------------------------------------------- }}}
# {{{ Colors and Icons

echo_info()    { echo -e "\\e[34m$1\\e[0m"; }
echo_warn()    { echo -e "\\e[33m$1\\e[0m"; }
echo_error()   { echo -e "\\e[31m$1\\e[0m"; }
echo_success() { echo -e "\\e[32m$1\\e[0m"; }

# -------------------------------------------------------------------------- }}}
# {{{ Variables

help=false
list=false
clone_mode=false
repo_mode=false
pull_mode=false
dry_run=false
verbose=false
clean_mode=false
utf_mode=false
stash_list_mode=false

repo_args=()

cloned=0
updated=0
skipped=0
cleaned=0
converted=0
stashes=0

max_jobs=4
jobcount=0

start_time=$(date +%s)

# -------------------------------------------------------------------------- }}}
# {{{ Load Config

REPO_CONFIG="$HOME/.config/gits/repo_locations"

if [[ -f "$REPO_CONFIG" ]]; then
  source "$REPO_CONFIG"
else
  echo_error "ERROR: repo_locations file not found at $REPO_CONFIG"
  exit 1
fi

# -------------------------------------------------------------------------- }}}
# {{{ usage

usage() {
  echo
  echo_info "Usage: gits [options] [repo-locations...]"
  echo
  echo "Options:"
  echo "  -h          Show help"
  echo
  echo "  -c          Clone missing repositories (from bash arrays)"
  echo "  -d          Dry-run (simulate actions)"
  echo "  -l          List repository locations"
  echo "  -p          Pull repositories with safe stashing"
  echo "  -r          Operate on filesystem repositories (-x, -U, -s)"
  echo "  -s          List repositories with stash entries (with -r)"
  echo "  -U          Convert UTF-16 files to UTF-8 (with -r)"
  echo "  -v          Verbose output"
  echo "  -x          Clean untracked files (with -r)"
  echo
  exit 0
}

# -------------------------------------------------------------------------- }}}
# {{{ listRepos

listRepos() {
  echo
  echo_info "Available repository locations:"
  grep '^repo_' "$REPO_CONFIG" | sed 's/^repo_//;s/=.*//'
  echo
}

# -------------------------------------------------------------------------- }}}
# {{{ waitForJobs

waitForJobs() {
  while (( jobcount >= max_jobs )); do
    wait -n
    ((jobcount--))
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ cloneRepo

cloneRepo() {
  local url="$1"
  local target_dir="$2"

  if [[ ! -d "$target_dir/.git" ]]; then
    echo_info "‚û°Ô∏è  Cloning $(basename "$target_dir")"
    if [[ $dry_run == false ]]; then
      if git clone "$url" "$target_dir" &>/dev/null; then
        echo_success "‚úÖ  Cloned: $(basename "$target_dir")"
        ((cloned++))
      else
        echo_error "‚ùå  Failed to clone: $(basename "$target_dir")"
      fi
    fi
  else
    echo_warn "‚ö†Ô∏è  Already exists: $(basename "$target_dir")"
    ((skipped++))
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ pullRepo

pullRepo() {
  local dir="$1"

  if [[ -d "$dir/.git" ]]; then
    echo_info "‚¨ÜÔ∏è  Pulling $(basename "$dir")"

    if [[ $dry_run == false ]]; then
      local dirty
      dirty=$(cd "$dir" && git status --porcelain)

      if [[ -n "$dirty" ]]; then
        echo_info "üì¶ Stashing changes in $(basename "$dir")"
        if [[ $verbose == true ]]; then
          echo "$dirty"
        fi
        (cd "$dir" && git stash push -u -m "gits auto-stash" &>/dev/null)
      fi

      (cd "$dir" && git pull &>/dev/null)

      ((updated++))
    fi
  else
    echo_warn "‚ö†Ô∏è  Skipping non-repo: $(basename "$dir")"
    ((skipped++))
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ repoActions

repoActions() {
  local dir="$1"
  [[ -d "$dir/.git" ]] || return

  if [[ $clean_mode == true ]]; then
    echo_info "üßπ Cleaning untracked files: $(basename "$dir")"
    if [[ $verbose == true ]]; then
      (cd "$dir" && git clean -fd)
    else
      (cd "$dir" && git clean -fdq)
    fi
    ((cleaned++))
  fi

  if [[ $utf_mode == true ]]; then
    for file in "$dir"/*; do
      [[ -f "$file" ]] || continue
      if file "$file" | grep -q 'UTF-16'; then
        echo_info "üîÑ Converting UTF-16 to UTF-8: $(basename "$file")"
        if [[ $dry_run == false ]]; then
          iconv -f UTF-16 -t UTF-8 "$file" -o "$file.new" && mv "$file.new" "$file"
          ((converted++))
        fi
      fi
    done
  fi

  if [[ $stash_list_mode == true ]]; then
    if (cd "$dir" && git stash list | grep -q .); then
      echo_info "üì¶ Stash found: $(basename "$dir")"
      ((stashes++))
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ repo

repo() {
  local location="$1"
  local repos_location_check="repo_${location}"
  local repos_var_new="repo_${location}[@]"
  local basedir="$HOME/$location"

  mkdir -p "$basedir"

  if [[ $clone_mode == true ]]; then
    if ! declare -p "$repos_location_check" &>/dev/null; then
      echo_error "ERROR: Repository location '$location' is not defined."
      exit 1
    fi

    local repos=("${!repos_var_new}")

    for entry in "${repos[@]}"; do
      local url="${entry%% *}"
      local alias="${entry##* }"
      local target_dir="$basedir/$alias"

      cloneRepo "$url" "$target_dir" &
      ((jobcount++))
      waitForJobs
    done

  elif [[ $pull_mode == true ]]; then
    for dir in "$basedir"/*; do
      [[ -d "$dir" ]] || continue

      pullRepo "$dir" &
      ((jobcount++))
      waitForJobs
    done

  elif [[ $repo_mode == true ]]; then
    for dir in "$basedir"/*; do
      [[ -d "$dir" ]] || continue

      repoActions "$dir" &
      ((jobcount++))
      waitForJobs
    done
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Parse Arguments

while [[ $# -gt 0 ]]; do
  case "$1" in
    -c) clone_mode=true ;;
    -d) dry_run=true ;;
    -h) help=true ;;
    -l) list=true ;;
    -p) pull_mode=true ;;
    -r) repo_mode=true ;;
    -s) stash_list_mode=true ;;
    -U) utf_mode=true ;;
    -v) verbose=true ;;
    -x) clean_mode=true ;;
    *) repo_args+=("$1") ;;
  esac
  shift
done

if [[ $help == true || $list == true ]]; then
  [[ $help == true ]] && usage
  [[ $list == true ]] && listRepos
  exit 0
fi

# Validate exclusivity
if [[ $repo_mode == true && $pull_mode == true ]]; then
  echo_error "ERROR: -r and -p are mutually exclusive."
  exit 1
fi

if [[ $repo_mode == true ]]; then
  if [[ $clean_mode == false && $utf_mode == false && $stash_list_mode == false ]]; then
    echo_error "ERROR: -r requires at least one of -x, -U, or -s."
    exit 1
  fi
fi

if [[ $pull_mode == true ]]; then
  if [[ $clean_mode == true || $utf_mode == true || $stash_list_mode == true ]]; then
    echo_error "ERROR: -p cannot be combined with -x, -U, or -s."
    exit 1
  fi
fi

# -------------------------------------------------------------------------- }}}
# {{{ Main

for location in "${repo_args[@]}"; do
  repo "$location"
done

wait

end_time=$(date +%s)
elapsed=$((end_time - start_time))
minutes=$((elapsed / 60))
seconds=$((elapsed % 60))

if [[ $clone_mode == true || $pull_mode == true ]]; then
  echo
  echo_info "Summary:"
  echo "  ‚û°Ô∏è  Cloned : $cloned"
  echo "  ‚¨ÜÔ∏è  Updated: $updated"
  echo "  ‚ö†Ô∏è  Skipped: $skipped"
  echo
fi

echo_success "‚úÖ Done."
echo_info "‚è±Ô∏è Elapsed time: ${minutes}m ${seconds}s"

# -------------------------------------------------------------------------- }}}
