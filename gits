#!/bin/bash
# vim: set foldmethod=marker :
# {{{ Variables

subcommand="pull"
repo_args=()
dry_run=false
compact=true

cloned=0
updated=0
skipped=0

# -------------------------------------------------------------------------- }}}
# {{{ Load Config

REPO_CONFIG="$HOME/.config/gits/repo_locations"

if [[ -f "$REPO_CONFIG" ]]; then
  source "$REPO_CONFIG"
else
  echo "ERROR: repo_locations file not found at $REPO_CONFIG" >&2
  exit 1
fi

# -------------------------------------------------------------------------- }}}
# {{{ usage

usage() {
  echo "Usage: gits [options] [repo-locations...]"
  echo
  echo "Options:"
  echo "  -h          Show help"
  echo "  -l          List repository locations"
  echo "  -c          Clone missing repositories (based on bash arrays)"
  echo "  -r          Pull changes for all repositories found on filesystem"
  echo "  -p          Alias for -r (pull)"
  echo "  -d          Dry-run (simulate actions)"
  echo "  -v          Verbose output"
  exit 0
}

# -------------------------------------------------------------------------- }}}
# {{{ listRepos

listRepos() {
  echo "Available repository locations:"
  grep '^repo_' "$REPO_CONFIG" | sed 's/^repo_//;s/=.*//'
}

# -------------------------------------------------------------------------- }}}
# {{{ cloneRepos

cloneRepos() {
  local location="$1"
  local repos_var="repo_${location}"

  if [[ -z "${!repos_var}" ]]; then
    echo "⚠️  No repositories defined for location: $location"
    return
  fi

  local basedir="$HOME/$location"
  mkdir -p "$basedir"

  for entry in "${!repos_var}"; do
    local url="${entry%% *}"
    local alias="${entry##* }"
    local target_dir="$basedir/$alias"

    if [[ ! -d "$target_dir/.git" ]]; then
      echo "➡️  Cloning $alias from $url"
      if [[ "$dry_run" = false ]]; then
        if git clone "$url" "$target_dir" &>/dev/null; then
          echo "✅  Cloned: $alias"
          ((cloned++))
        else
          echo "❌  Failed to clone: $alias"
        fi
      fi
    else
      echo "⚠️  Already exists: $alias"
      ((skipped++))
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ pullRepos

pullRepos() {
  local location="$1"
  local basedir="$HOME/$location"

  if [[ ! -d "$basedir" ]]; then
    echo "⚠️  Base directory not found: $basedir"
    return
  fi

  for dir in "$basedir"/*; do
    if [[ -d "$dir/.git" ]]; then
      local repo_name
      repo_name=$(basename "$dir")
      echo "⬆️  Pulling $repo_name"
      if [[ "$dry_run" = false ]]; then
        if (cd "$dir" && git pull &>/dev/null); then
          echo "✅  Updated: $repo_name"
          ((updated++))
        else
          echo "❌  Failed to update: $repo_name"
        fi
      fi
    else
      local name
      name=$(basename "$dir")
      echo "⚠️  Skipping non-repo: $name"
      ((skipped++))
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Parse Arguments

if [[ $# -eq 0 ]]; then
  usage
fi

while [[ $# -gt 0 ]]; do
  case "$1" in

