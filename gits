#!/bin/bash
# vim: set foldmethod=marker :
# {{{ Variables

help=false
list=false
clone_mode=false
repo_mode=false
pull_mode=false
dry_run=false
verbose=false
clean_mode=false
utf_mode=false
stash_list_mode=false

repo_args=()

cloned=0
updated=0
skipped=0
cleaned=0
converted=0
stashes=0

max_jobs=4
jobcount=0

start_time=$(date +%s)

# -------------------------------------------------------------------------- }}}
# {{{ Load Config

REPO_CONFIG="$HOME/.config/gits/repo_locations"

if [[ -f "$REPO_CONFIG" ]]; then
  source "$REPO_CONFIG"
else
  echo "ERROR: repo_locations file not found at $REPO_CONFIG" >&2
  exit 1
fi

# -------------------------------------------------------------------------- }}}
# {{{ usage

usage() {
  echo "Usage: gits [options] [repo-locations...]"
  echo
  echo "Options:"
  echo "  -h          Show help"
  echo "  -l          List repository locations"
  echo "  -c          Clone missing repositories (from bash arrays)"
  echo "  -r          Operate on filesystem repositories (-x, -U, -s)"
  echo "  -p          Pull repositories with safe stashing"
  echo "  -d          Dry-run (simulate actions)"
  echo "  -v          Verbose output"
  echo "  -x          Clean untracked files (with -r)"
  echo "  -U          Convert UTF-16 files to UTF-8 (with -r)"
  echo "  -s          List repositories with stash entries (with -r)"
  exit 0
}

# -------------------------------------------------------------------------- }}}
# {{{ listRepos

listRepos() {
  echo "Available repository locations:"
  grep '^repo_' "$REPO_CONFIG" | sed 's/^repo_//;s/=.*//'
}

# -------------------------------------------------------------------------- }}}
# {{{ waitForJobs

waitForJobs() {
  while (( jobcount >= max_jobs )); do
    wait -n
    ((jobcount--))
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ detectUtf16AndConvert

detectUtf16AndConvert() {
  local target_dir="$1"

  for file in "$target_dir"/*; do
    [[ -f "$file" ]] || continue
    if file "$file" | grep -q 'UTF-16'; then
      echo "🔄 Converting UTF-16 to UTF-8: $(basename "$file")"
      if [[ "$dry_run" = false ]]; then
        iconv -f UTF-16 -t UTF-8 "$file" -o "$file.new" && mv "$file.new" "$file"
        ((converted++))
      fi
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ checkForStashes

checkForStashes() {
  local dir="$1"

  if [[ -d "$dir/.git" ]]; then
    if (cd "$dir" && git stash list | grep -q .); then
      echo "📦 Stash found: $(basename "$dir")"
      ((stashes++))
    fi
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ cloneRepo

cloneRepo() {
  local url="$1"
  local target_dir="$2"

  if [[ ! -d "$target_dir/.git" ]]; then
    echo "➡️  Cloning $(basename "$target_dir")"
    if [[ "$dry_run" = false ]]; then
      if git clone "$url" "$target_dir" &>/dev/null; then
        echo "✅  Cloned: $(basename "$target_dir")"
        ((cloned++))
      else
        echo "❌  Failed to clone: $(basename "$target_dir")"
      fi
    fi
  else
    echo "⚠️  Already exists: $(basename "$target_dir")"
    ((skipped++))
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ pullRepo

pullRepo() {
  local dir="$1"

  if [[ -d "$dir/.git" ]]; then
    echo "⬆️  Pulling $(basename "$dir")"

    if [[ "$dry_run" = false ]]; then
      local dirty=$(cd "$dir" && git status --porcelain)

      if [[ -n "$dirty" ]]; then
        echo "📦 Stashing changes in $(basename "$dir")"
        if [[ "$verbose" = true ]]; then
          echo "$dirty"
        fi
        (cd "$dir" && git stash push -u -m "gits auto-stash" &>/dev/null)
      fi

      (cd "$dir" && git pull &>/dev/null)

      ((updated++))
    fi
  else
    echo "⚠️  Skipping non-repo: $(basename "$dir")"
    ((skipped++))
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ repoActions

repoActions() {
  local dir="$1"

  [[ -d "$dir/.git" ]] || return

  if [[ "$clean_mode" = true ]]; then
    echo "🧹 Cleaning untracked files in $(basename "$dir")"
    if [[ "$dry_run" = false ]]; then
      if [[ "$verbose" = true ]]; then
        (cd "$dir" && git clean -fdn)
      else
        (cd "$dir" && git clean -fd &>/dev/null)
      fi
      ((cleaned++))
    fi
  fi

  if [[ "$utf_mode" = true ]]; then
    detectUtf16AndConvert "$dir"
  fi

  if [[ "$stash_list_mode" = true ]]; then
    checkForStashes "$dir"
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ repo

repo() {
  local location="$1"
  local repos_var="repo_${location}"
  local basedir="$HOME/$location"

  mkdir -p "$basedir"

  if [[ "$clone_mode" = true ]]; then
    if [[ -n "${!repos_var}" ]]; then
      for entry in "${!repos_var[@]}"; do
        local url="${entry%% *}"
        local alias="${entry##* }"
        local target_dir="$basedir/$alias"

        cloneRepo "$url" "$target_dir" &
        ((jobcount++))
        waitForJobs
      done
    else
      echo "⚠️  No repositories defined for location: $location"
    fi
  elif [[ "$pull_mode" = true ]]; then
    for dir in "$basedir"/*; do
      [[ -d "$dir" ]] || continue

      pullRepo "$dir" &
      ((jobcount++))
      waitForJobs
    done
  elif [[ "$repo_mode" = true ]]; then
    for dir in "$basedir"/*; do
      [[ -d "$dir" ]] || continue

      repoActions "$dir" &
      ((jobcount++))
      waitForJobs
    done
  fi
}

# -------------------------------------------------------------------------- }}}
# {{{ Parse Arguments

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h) help=true ;;
    -l) list=true ;;
    -c) clone_mode=true ;;
    -r) repo_mode=true ;;
    -p) pull_mode=true ;;
    -d) dry_run=true ;;
    -v) verbose=true ;;
    -x) clean_mode=true ;;
    -U) utf_mode=true ;;
    -s) stash_list_mode=true ;;
    *)
      repo_args+=("$1")
      ;;
  esac
  shift
done

# Precedence: help and list first
if [[ "$help" = true || "$list" = true ]]; then
  [[ "$help" = true ]] && usage
  [[ "$list" = true ]] && listRepos
  exit 0
fi

# Validate mutually exclusive options
if [[ "$repo_mode" = true && "$pull_mode" = true ]]; then
  echo "ERROR: -r and -p are mutually exclusive." >&2
  exit 1
fi

# Validate -r usage
if [[ "$repo_mode" = true ]]; then
  if [[ "$clean_mode" = false && "$utf_mode" = false && "$stash_list_mode" = false ]]; then
    echo "ERROR: -r requires at least one of -x, -U, or -s." >&2
    exit 1
  fi
fi

# Validate -p usage
if [[ "$pull_mode" = true ]]; then
  if [[ "$clean_mode" = true || "$utf_mode" = true || "$stash_list_mode" = true ]]; then
    echo "ERROR: -p cannot be combined with -x, -U, or -s." >&2
    exit 1
  fi
fi

# -------------------------------------------------------------------------- }}}
# {{{ Main

for location in "${repo_args[@]}"; do
  repo "$location"
done

wait

end_time=$(date +%s)
elapsed=$((end_time - start_time))
minutes=$((elapsed / 60))
seconds=$((elapsed % 60))

if [[ "$clone_mode" = true || "$pull_mode" = true ]]; then
  echo
  echo "Summary:"
  echo "  ➡️  Cloned : $cloned"
  echo "  ⬆️  Updated: $updated"
  echo "  ⚠️  Skipped: $skipped"
  echo "  🧹  Cleaned : $cleaned"
  echo "  🔄  UTF-16→8: $converted"
  echo "  📦  Stash   : $stashes"
fi

echo
echo "✅ Done."
echo "⏱️  Elapsed time: ${minutes}m ${seconds}s"

# -------------------------------------------------------------------------- }}}
