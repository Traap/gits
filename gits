#!/bin/bash
# vim: set foldmethod=marker :
# {{{ Variables

subcommand="pull"
repo_args=()
dry_run=false
compact=true

cloned=0
updated=0
skipped=0

# -------------------------------------------------------------------------- }}}
# {{{ Load Config

REPO_CONFIG="$HOME/.config/gits/repo_locations"

if [[ -f "$REPO_CONFIG" ]]; then
  source "$REPO_CONFIG"
else
  echo "ERROR: repo_locations file not found at $REPO_CONFIG" >&2
  exit 1
fi

# -------------------------------------------------------------------------- }}}
# {{{ usage

usage() {
  echo "Usage: gits [options] [repo-locations...]"
  echo
  echo "Options:"
  echo "  -h          Show help"
  echo "  -l          List repository locations"
  echo "  -c          Clone missing repositories"
  echo "  -r          Pull latest changes (default behavior)"
  echo "  -p          Alias for -r (pull)"
  echo "  -d          Dry-run (simulate actions)"
  echo "  -v          Verbose output"
  exit 0
}

# -------------------------------------------------------------------------- }}}
# {{{ listRepos

listRepos() {
  echo "Available repository locations:"
  grep '^repo_' "$REPO_CONFIG" | sed 's/^repo_//;s/=.*//'
}

# -------------------------------------------------------------------------- }}}
# {{{ repo

repo() {
  local location="$1"
  local repos_var="repo_${location}"

  if [[ -z "${!repos_var}" ]]; then
    echo "⚠️  No repositories defined for location: $location"
    return
  fi

  local basedir="$HOME/$location"
  mkdir -p "$basedir"

  for entry in "${!repos_var}"; do
    local url="${entry%% *}"
    local alias="${entry##* }"
    local target_dir="$basedir/$alias"

    if [[ "$subcommand" == "clone" ]]; then
      if [[ ! -d "$target_dir/.git" ]]; then
        echo "➡️  Cloning $alias from $url"
        if [[ "$dry_run" = false ]]; then
          if git clone "$url" "$target_dir" &>/dev/null; then
            echo "✅  Cloned: $alias"
            ((cloned++))
          else
            echo "❌  Failed to clone: $alias"
          fi
        fi
      else
        echo "⚠️  Already exists: $alias"
        ((skipped++))
      fi
    elif [[ "$subcommand" == "pull" ]]; then
      if [[ -d "$target_dir/.git" ]]; then
        echo "⬆️  Pulling $alias"
        if [[ "$dry_run" = false ]]; then
          if (cd "$target_dir" && git pull &>/dev/null); then
            echo "✅  Updated: $alias"
            ((updated++))
          else
            echo "❌  Failed to update: $alias"
          fi
        fi
      else
        echo "⚠️  Not a valid repo: $alias"
        ((skipped++))
      fi
    fi
  done
}

# -------------------------------------------------------------------------- }}}
# {{{ Parse Arguments

if [[ $# -eq 0 ]]; then
  usage
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h)
      usage
      ;;
    -l)
      listRepos
      exit 0
      ;;
    -c)
      subcommand="clone"
      shift
      ;;
    -r|-p)
      subcommand="pull"
      shift
      ;;
    -d)
      dry_run=true
      shift
      ;;
    -v)
      compact=false
      shift
      ;;
    *)
      repo_args+=("$1")
      shift
      ;;
  esac
done

# -------------------------------------------------------------------------- }}}
# {{{ Main

for location in "${repo_args[@]}"; do
  repo "$location"
done

echo
echo "Summary:"
echo "  Cloned : $cloned"
echo "  Updated: $updated"
echo "  Skipped: $skipped"
echo
echo "✅ Done."

# -------------------------------------------------------------------------- }}}
